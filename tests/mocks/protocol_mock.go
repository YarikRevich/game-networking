// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/YarikRevich/game-networking/protocol/pkg/models (interfaces: ProtocolManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProtocolManager is a mock of ProtocolManager interface.
type MockProtocolManager struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolManagerMockRecorder
}

// MockProtocolManagerMockRecorder is the mock recorder for MockProtocolManager.
type MockProtocolManagerMockRecorder struct {
	mock *MockProtocolManager
}

// NewMockProtocolManager creates a new mock instance.
func NewMockProtocolManager(ctrl *gomock.Controller) *MockProtocolManager {
	mock := &MockProtocolManager{ctrl: ctrl}
	mock.recorder = &MockProtocolManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocolManager) EXPECT() *MockProtocolManagerMockRecorder {
	return m.recorder
}

// IsProtocolMsg mocks base method.
func (m *MockProtocolManager) IsProtocolMsg(arg0 interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProtocolMsg", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProtocolMsg indicates an expected call of IsProtocolMsg.
func (mr *MockProtocolManagerMockRecorder) IsProtocolMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProtocolMsg", reflect.TypeOf((*MockProtocolManager)(nil).IsProtocolMsg), arg0)
}

// IsProtocolSet mocks base method.
func (m *MockProtocolManager) IsProtocolSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProtocolSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProtocolSet indicates an expected call of IsProtocolSet.
func (mr *MockProtocolManagerMockRecorder) IsProtocolSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProtocolSet", reflect.TypeOf((*MockProtocolManager)(nil).IsProtocolSet))
}

// SetProtocol mocks base method.
func (m *MockProtocolManager) SetProtocol(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProtocol", arg0)
}

// SetProtocol indicates an expected call of SetProtocol.
func (mr *MockProtocolManagerMockRecorder) SetProtocol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProtocol", reflect.TypeOf((*MockProtocolManager)(nil).SetProtocol), arg0)
}
